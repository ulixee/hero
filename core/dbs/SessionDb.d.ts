import AwaitedEventsTable from '../models/AwaitedEventsTable';
import CommandsTable from '../models/CommandsTable';
import DetachedElementsTable from '../models/DetachedElementsTable';
import DetachedResourcesTable from '../models/DetachedResourcesTable';
import DevtoolsMessagesTable from '../models/DevtoolsMessagesTable';
import DomChangesTable from '../models/DomChangesTable';
import FlowCommandsTable from '../models/FlowCommandsTable';
import FlowHandlersTable from '../models/FlowHandlersTable';
import FocusEventsTable from '../models/FocusEventsTable';
import FrameNavigationsTable from '../models/FrameNavigationsTable';
import FramesTable from '../models/FramesTable';
import InteractionStepsTable from '../models/InteractionStepsTable';
import MouseEventsTable from '../models/MouseEventsTable';
import OutputTable from '../models/OutputTable';
import PageLogsTable from '../models/PageLogsTable';
import ResourcesTable from '../models/ResourcesTable';
import ResourceStatesTable from '../models/ResourceStatesTable';
import ScreenshotsTable from '../models/ScreenshotsTable';
import ScrollEventsTable from '../models/ScrollEventsTable';
import SessionLogsTable from '../models/SessionLogsTable';
import SessionTable from '../models/SessionTable';
import SnippetsTable from '../models/SnippetsTable';
import SocketsTable from '../models/SocketsTable';
import StorageChangesTable from '../models/StorageChangesTable';
import TabsTable from '../models/TabsTable';
import WebsocketMessagesTable from '../models/WebsocketMessagesTable';
interface IDbOptions {
    readonly?: boolean;
    fileMustExist?: boolean;
}
export default class SessionDb {
    get readonly(): boolean;
    get isOpen(): boolean;
    readonly path: string;
    commands: CommandsTable;
    frames: FramesTable;
    frameNavigations: FrameNavigationsTable;
    sockets: SocketsTable;
    resources: ResourcesTable;
    resourceStates: ResourceStatesTable;
    websocketMessages: WebsocketMessagesTable;
    domChanges: DomChangesTable;
    detachedElements: DetachedElementsTable;
    detachedResources: DetachedResourcesTable;
    snippets: SnippetsTable;
    interactions: InteractionStepsTable;
    flowHandlers: FlowHandlersTable;
    flowCommands: FlowCommandsTable;
    pageLogs: PageLogsTable;
    sessionLogs: SessionLogsTable;
    session: SessionTable;
    mouseEvents: MouseEventsTable;
    focusEvents: FocusEventsTable;
    scrollEvents: ScrollEventsTable;
    storageChanges: StorageChangesTable;
    screenshots: ScreenshotsTable;
    devtoolsMessages: DevtoolsMessagesTable;
    awaitedEvents: AwaitedEventsTable;
    tabs: TabsTable;
    output: OutputTable;
    readonly sessionId: string;
    private readonly batchInsert?;
    private readonly saveInterval;
    private db;
    private readonly tables;
    constructor(sessionId: string, path: string, dbOptions?: IDbOptions);
    getCollectedAssetNames(): {
        resources: string[];
        elements: string[];
        snippets: string[];
    };
    close(): void;
    recycle(): void;
    flush(): void;
    private attach;
}
export {};
