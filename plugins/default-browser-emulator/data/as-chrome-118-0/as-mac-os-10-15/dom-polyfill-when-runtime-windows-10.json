{
  "add": [
    {
      "path": "window",
      "propertyName": "BarcodeDetector",
      "prevProperty": "PublicKeyCredential",
      "property": {
        "length": {
          "_$type": "number",
          "_$flags": "c",
          "_$value": 0
        },
        "name": {
          "_$type": "string",
          "_$flags": "c",
          "_$value": "BarcodeDetector"
        },
        "arguments": {
          "_$type": "object",
          "_$flags": "",
          "_$value": null
        },
        "caller": {
          "_$type": "object",
          "_$flags": "",
          "_$value": null
        },
        "prototype": {
          "_$protos": [
            "Object.prototype"
          ],
          "detect": {
            "length": {
              "_$type": "number",
              "_$flags": "c",
              "_$value": 1
            },
            "name": {
              "_$type": "string",
              "_$flags": "c",
              "_$value": "detect"
            },
            "_$type": "function",
            "_$function": "function detect() { [native code] }",
            "_$invocation": "TypeError: Failed to execute 'detect' on 'BarcodeDetector': Illegal invocation",
            "_$isAsync": true,
            "_$flags": "cew",
            "_$value": "function detect() { [native code] }",
            "_$otherInvocationAsync.window.BarcodeDetector.new().detect": "TypeError: Failed to execute 'detect' on 'BarcodeDetector': 1 argument required, but only 0 present."
          },
          "Symbol(Symbol.toStringTag)": {
            "_$type": "string",
            "_$flags": "c",
            "_$value": "BarcodeDetector"
          },
          "_$type": "object",
          "_$flags": ""
        },
        "getSupportedFormats": {
          "length": {
            "_$type": "number",
            "_$flags": "c",
            "_$value": 0
          },
          "name": {
            "_$type": "string",
            "_$flags": "c",
            "_$value": "getSupportedFormats"
          },
          "_$type": "function",
          "_$function": "function getSupportedFormats() { [native code] }",
          "_$invocation": "[aztec,code_128,code_39,code_93,data_matrix,ean_13,ean_8,itf,pdf417,qr_code,upc_e]",
          "_$isAsync": true,
          "_$flags": "cew",
          "_$value": "function getSupportedFormats() { [native code] }"
        },
        "new()": {
          "_$protos": [
            "BarcodeDetector.prototype",
            "Object.prototype"
          ],
          "_$type": "constructor"
        },
        "_$type": "function",
        "_$function": "function BarcodeDetector() { [native code] }",
        "_$invocation": "TypeError: Failed to construct 'BarcodeDetector': Please use the 'new' operator, this DOM object constructor cannot be called as a function.",
        "_$flags": "cw",
        "_$value": "function BarcodeDetector() { [native code] }"
      }
    }
  ],
  "remove": [
    {
      "path": "window.Navigator.prototype",
      "propertyName": "canShare"
    },
    {
      "path": "window.Navigator.prototype",
      "propertyName": "share"
    },
    {
      "path": "window.Notification.prototype",
      "propertyName": "image"
    },
    {
      "path": "window.Text.prototype",
      "propertyName": "getDestinationInsertionPoints"
    },
    {
      "path": "window.Element.prototype",
      "propertyName": "createShadowRoot"
    },
    {
      "path": "window.Element.prototype",
      "propertyName": "getDestinationInsertionPoints"
    },
    {
      "path": "window.Document.prototype",
      "propertyName": "registerElement"
    },
    {
      "path": "window",
      "propertyName": "cdc_adoQpoasnfa76pfcZLmcfl"
    },
    {
      "path": "window.HTMLLinkElement.prototype",
      "propertyName": "import"
    }
  ],
  "modify": [
    {
      "path": "window.PublicKeyCredential.isConditionalMediationAvailable",
      "propertyName": "_$invocation",
      "property": true
    },
    {
      "path": "window.Bluetooth.prototype.getAvailability",
      "propertyName": "_$otherInvocationAsync.window.navigator.bluetooth.getAvailability",
      "property": true
    }
  ],
  "reorder": [
    {
      "path": "window",
      "propertyName": "Bluetooth",
      "throughProperty": "PERSISTENT",
      "prevProperty": "BarcodeDetector"
    }
  ]
}
